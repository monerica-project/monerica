@using DirectoryManager.Data.Enums
@using DirectoryManager.Web.Constants
@using DirectoryManager.Web.Helpers
@using DirectoryManager.Web.Models
@model DirectoryManager.Web.Models.CategoryViewModel
@inject DirectoryManager.Web.Services.Interfaces.ICacheService cacheHelper
@inject DirectoryManager.Data.Repositories.Interfaces.ISponsoredListingRepository sponsoredListingRepository

@{
    ViewData[StringConstants.TitleHeader] = string.Format("{0}: {1}", cacheHelper.GetSnippet(SiteConfigSetting.SiteName), Model.PageTitle);
    ViewData[StringConstants.MetaDescription] = Model.MetaDescription;
    var domain = cacheHelper.GetSnippet(SiteConfigSetting.CanonicalDomain);

    // Build your breadcrumb list dynamically based on page context
    var breadcrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem { Position = 1, Name = "Home", Url = UrlHelper.MakeFullUrl(domain,"/") },
        new BreadcrumbItem { Position = 2, Name = StringConstants.AllCategories, Url = UrlHelper.MakeFullUrl(domain,"/sitemap") },
        new BreadcrumbItem { Position = 3, Name = Model.CategoryName, Url = UrlHelper.MakeFullUrl(domain,$"/{@Model.CategoryKey}") }
    };
}

@BreadcrumbJsonHelper.GenerateBreadcrumbJson(breadcrumbs)

<h1>@Model.PageHeader</h1>

<hr />

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a class="no-app-link" href="~/">Home</a>
        </li>
        <li class="breadcrumb-item">
            <a class="no-app-link" href="~/sitemap">@StringConstants.AllCategories</a>
        <li class="breadcrumb-item" aria-current="page">
            @Model.CategoryName
        </li>
    </ol>
</nav>


@if (!string.IsNullOrWhiteSpace(Model.Description))
{
    <p><span>@Html.Raw(Model.Description)</span></p>
}

@if (!string.IsNullOrWhiteSpace(Model.Note))
{
    <p><i>Note: @Html.Raw(Model.Note)</i></p>
}

@{
    var link2Name = cacheHelper.GetSnippet(SiteConfigSetting.Link2Name);
    var link3Name = cacheHelper.GetSnippet(SiteConfigSetting.Link3Name);
    var categorySponsors = await sponsoredListingRepository.GetActiveSponsorsByTypeAsync(SponsorshipType.CategorySponsor);

    // find the sponsor for this category (if any)
    var catSponsor = categorySponsors
                        .FirstOrDefault(s =>
                            s.DirectoryEntry?.SubCategory?.CategoryId == Model.CategoryId);

    var catSponsorCount = categorySponsors.Count();

    var categorySponsorModel = new DirectoryManager.Web.Models.CategorySponsorModel()
                {
                    CategoryId = Model.CategoryId,
                    TotalActiveCategoryListings = catSponsorCount,
                    DirectoryEntry = (catSponsor != null && catSponsor.DirectoryEntry != null) ? new DirectoryManager.DisplayFormatting.Models.DirectoryEntryViewModel()
                    {
                        CreateDate = catSponsor.DirectoryEntry.CreateDate,
                        UpdateDate = catSponsor.DirectoryEntry.UpdateDate,
                        DateOption = DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.NotDisplayed,
                        Link = catSponsor.DirectoryEntry.Link,
                        Link2 = catSponsor.DirectoryEntry.Link2,
                        Link3 = catSponsor.DirectoryEntry.Link3,
                        Name = catSponsor.DirectoryEntry.Name,
                        Contact = catSponsor.DirectoryEntry.Contact,
                        Description = catSponsor.DirectoryEntry.Description,
                        DirectoryEntryId = catSponsor.DirectoryEntry.DirectoryEntryId,
                        DirectoryStatus = catSponsor.DirectoryEntry.DirectoryStatus,
                        Location = catSponsor.DirectoryEntry.Location,
                        Note = catSponsor.DirectoryEntry.Note,
                        Processor = catSponsor.DirectoryEntry.Processor,
                        SubCategoryId = catSponsor.DirectoryEntry.SubCategoryId,
                        IsSponsored = true,
                        DisplayAsSponsoredItem = false,
                        Link2Name = link2Name,
                        Link3Name = link3Name
                    } : null
                };
}
 @await Html.PartialAsync("_SponsoredListingCategoryPartial", categorySponsorModel)

     <section>
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <ul>

                    @foreach (var item in Model.SubCategoryItems)
                    {
                        <li>
                            <a class="no-app-link" href="@item.SubCategoryRelativePath">@item.Name</a>
                        </li>
                    }
                     
                    </ul>
                </div>
            </div>
        </div>
     </section>

<hr />

@await Html.PartialAsync("_SponsoredListingPartial")