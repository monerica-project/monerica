@model DirectoryManager.Web.Models.CategorySubCategoriesViewModel
@using DirectoryManager.Data.Models
@using DirectoryManager.Web.Constants;
@using DirectoryManager.Data.Enums;
@using DirectoryManager.Web.Enums
@inject DirectoryManager.Web.Services.Interfaces.ICacheService cacheHelper
@inject DirectoryManager.Data.Repositories.Interfaces.ISponsoredListingRepository sponsoredListingRepository
@inject DirectoryManager.Data.Repositories.Interfaces.IDirectoryEntryRepository directoryEntryRepository
@inject DirectoryManager.Web.Services.Interfaces.ICacheService cacheHelper

@{
    ViewData[StringConstants.TitleHeader] = string.Format("{0}: {1}", cacheHelper.GetSnippet(SiteConfigSetting.SiteName), Model.PageTitle);
    ViewData[StringConstants.MetaDescription] = Model.MetaDescription;
    var categoryKey = ViewBag.CategoryKey as string;
    var subCategoryKey = ViewBag.SubCategoryKey as string;
    var categoryName = ViewBag.CategoryName as string;
    var subCategoryName = ViewBag.SubCategoryName as string;
}

<h1>@Model.PageHeader</h1>

<hr />

<p>
    <a class="no-app-link" href="@Model.CategoryRelativePath">&lt; @Model.CategoryName</a>
</p>

@if (!string.IsNullOrWhiteSpace(Model.PageDetails))
{
    <p>@Html.Raw(Model.PageDetails)</p>
}

@if (!string.IsNullOrWhiteSpace(Model.Note))
{
    <p><i>Note: @Html.Raw(Model.Note)</i></p>
}

@{
    var subCategorySponsors = await this.sponsoredListingRepository.GetSponsoredListingsForSubCategory(Model.SubCategoryId);
    var link2Name = cacheHelper.GetSnippet(SiteConfigSetting.Link2Name);
    var link3Name = cacheHelper.GetSnippet(SiteConfigSetting.Link3Name);
    var viewModelList = DirectoryManager.DisplayFormatting.Helpers.ViewModelConverter.ConvertToViewModels(
                                        Model.DirectoryEntries.ToList(),
                                        DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.NotDisplayed,
                                        DirectoryManager.DisplayFormatting.Enums.ItemDisplayType.SubcategorySponsor,
                                        link2Name,
                                        link3Name);
    var sponsoredListings = await sponsoredListingRepository.GetActiveSponsorsByTypeAsync(SponsorshipType.MainSponsor);
    var subCategorySponsor = subCategorySponsors.FirstOrDefault();
    var activeEntries = await directoryEntryRepository.GetActiveEntriesByCategoryAsync(Model.SubCategoryId);
    var subCategorySponsorModel = new DirectoryManager.Web.Models.SubcategorySponsorModel()
            {
                SubCategoryId = Model.SubCategoryId,
                TotalActiveSubCategoryListings = activeEntries.Count(),
                DirectoryEntry = (subCategorySponsor != null && subCategorySponsor.DirectoryEntry != null) ? new DirectoryManager.DisplayFormatting.Models.DirectoryEntryViewModel()
                {

                    DateOption = DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.NotDisplayed,
                    Link = subCategorySponsor.DirectoryEntry.Link,
                    Name = subCategorySponsor.DirectoryEntry.Name,
                    Contact = subCategorySponsor.DirectoryEntry.Contact,
                    Description = subCategorySponsor.DirectoryEntry.Description,
                    DirectoryEntryId = subCategorySponsor.DirectoryEntry.DirectoryEntryId,
                    DirectoryStatus = subCategorySponsor.DirectoryEntry.DirectoryStatus,
                    Link2 = subCategorySponsor.DirectoryEntry.Link2,
                    Link3 = subCategorySponsor.DirectoryEntry.Link3,
                    Location = subCategorySponsor.DirectoryEntry.Location,
                    Note = subCategorySponsor.DirectoryEntry.Note,
                    Processor = subCategorySponsor.DirectoryEntry.Processor,
                    SubCategoryId = subCategorySponsor.DirectoryEntry.SubCategoryId,
                    CreateDate = subCategorySponsor.DirectoryEntry.CreateDate,
                    UpdateDate = subCategorySponsor.DirectoryEntry.UpdateDate,

                    IsSponsored = true,
                    Link2Name = link2Name,
                    Link3Name = link3Name
                } : null
            };

    @await Html.PartialAsync("_SponsoredListingSubCategoryPartial", subCategorySponsorModel)

    if (subCategorySponsor != null)
    {
        viewModelList.RemoveAll(x => x.DirectoryEntryId == subCategorySponsor.DirectoryEntryId);
    }
}
<ul class="blank_list_item">
    @foreach (var viewModel in viewModelList)
    {
        viewModel.LinkType = DirectoryManager.DisplayFormatting.Enums.LinkType.ListingPage;

        if (sponsoredListings.FirstOrDefault(x => x.DirectoryEntryId == viewModel.DirectoryEntryId) != null)
        {
            viewModel.IsSponsored = true;
            viewModel.DisplayAsSponsoredItem = true;
            viewModel.LinkType = DirectoryManager.DisplayFormatting.Enums.LinkType.Direct;
        }

        @await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
    }
</ul>