@model DirectoryManager.Web.Models.CategorySubCategoriesViewModel
@using DirectoryManager.Data.Models
@using DirectoryManager.Data.Repositories.Interfaces
@using DirectoryManager.Web.Constants;
@using DirectoryManager.Data.Enums;
@using DirectoryManager.Web.Enums
@using DirectoryManager.Web.Helpers
@using DirectoryManager.Web.Models
@inject DirectoryManager.Web.Services.Interfaces.ICacheService cacheHelper
@inject DirectoryManager.Data.Repositories.Interfaces.ISponsoredListingRepository sponsoredListingRepository
@inject DirectoryManager.Data.Repositories.Interfaces.IDirectoryEntryRepository directoryEntryRepository
@inject DirectoryManager.Web.Services.Interfaces.ICacheService cacheHelper
@inject ICategoryRepository categoryRepo
@inject ISubcategoryRepository subCatRepo
@inject DirectoryManager.Web.Services.Interfaces.IUrlResolutionService UrlResolver


@{
    ViewData[StringConstants.TitleHeader] = string.Format("{0}: {1}", cacheHelper.GetSnippet(SiteConfigSetting.SiteName), Model.PageTitle);
    ViewData[StringConstants.MetaDescription] = Model.MetaDescription;
    var categoryKey = ViewBag.CategoryKey as string;
    var subCategoryKey = ViewBag.SubCategoryKey as string;
    var categoryName = ViewBag.CategoryName as string;
    var subCategoryName = ViewBag.SubCategoryName as string;
    var domain = cacheHelper.GetSnippet(SiteConfigSetting.CanonicalDomain);

    // Build your breadcrumb list dynamically based on page context
    var breadcrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem { Position = 1, Name = "Home", Url = UrlHelper.MakeFullUrl(domain,"/") },
        new BreadcrumbItem { Position = 2, Name = @categoryName, Url = UrlHelper.MakeFullUrl(domain,$"/{@categoryKey}") },
        new BreadcrumbItem { Position = 3, Name = @subCategoryName, Url = UrlHelper.MakeFullUrl(domain,$"/{@categoryKey}/{@subCategoryKey}")  }
    };
}

@{
    // build nav VM
    var cats = await categoryRepo.GetActiveCategoriesAsync();
    var lookup = new Dictionary<int, List<Subcategory>>();
    foreach(var c in cats)
        lookup[c.CategoryId] = (await subCatRepo.GetActiveSubCategoriesAsync(c.CategoryId)).ToList();

    var navModel = new NavigationViewModel {
        Categories = cats,
        SubsByCategory = lookup,
        CurrentCategoryKey      = Model.Category.CategoryKey,
        CurrentSubCategoryKey   = Model.SubCategoryKey
    };

     Layout = "_LayoutWithNav";
  ViewData["NavModel"] = navModel;
}

  @section PageContent {

@BreadcrumbJsonHelper.GenerateBreadcrumbJson(breadcrumbs)

    <div class="top-section search-section search-top-align">
        @await Html.PartialAsync("_SearchForm")
    </div>

<h1>@Model.PageHeader</h1>

<hr />

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a class="no-app-link" href="~/">Home</a>
        </li>
        <li class="breadcrumb-item">
            <a class="no-app-link" href="@Model.CategoryRelativePath">@Model.CategoryName</a>
        </li>
        <li class="breadcrumb-item" aria-current="page">
            @Model.SubcategoryName
        </li>
    </ol>
</nav>

@if (!string.IsNullOrWhiteSpace(Model.PageDetails))
{
    <p>@Html.Raw(Model.PageDetails)</p>
}

@if (!string.IsNullOrWhiteSpace(Model.Note))
{
    <p><i>Note: @Html.Raw(Model.Note)</i></p>
}

@{
    var subCategorySponsors = await this.sponsoredListingRepository.GetSponsoredListingsForSubCategory(Model.SubCategoryId);
    var link2Name = cacheHelper.GetSnippet(SiteConfigSetting.Link2Name);
    var link3Name = cacheHelper.GetSnippet(SiteConfigSetting.Link3Name);
    var viewModelList = DirectoryManager.DisplayFormatting.Helpers.ViewModelConverter.ConvertToViewModels(
                                        Model.PagedEntries.Items.ToList(),
                                        DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.NotDisplayed,
                                        DirectoryManager.DisplayFormatting.Enums.ItemDisplayType.SubcategorySponsor,
                                        link2Name,
                                        link3Name);
    var sponsoredListings = await sponsoredListingRepository.GetActiveSponsorsByTypeAsync(SponsorshipType.MainSponsor);
    var subCategorySponsor = subCategorySponsors.FirstOrDefault();
    var activeEntries = await directoryEntryRepository.GetActiveEntriesBySubcategoryAsync(Model.SubCategoryId);
    var subCategorySponsorModel = new DirectoryManager.Web.Models.SubcategorySponsorModel()
            {
                SubCategoryId = Model.SubCategoryId,
                TotalActiveSubCategoryListings = activeEntries.Count(),
                DirectoryEntry = (subCategorySponsor != null && subCategorySponsor.DirectoryEntry != null) ? new DirectoryManager.DisplayFormatting.Models.DirectoryEntryViewModel()
                {

                    DateOption = DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.NotDisplayed,
                    Link = subCategorySponsor.DirectoryEntry.Link,
                    Name = subCategorySponsor.DirectoryEntry.Name,
                    Contact = subCategorySponsor.DirectoryEntry.Contact,
                    Description = subCategorySponsor.DirectoryEntry.Description,
                    DirectoryEntryId = subCategorySponsor.DirectoryEntry.DirectoryEntryId,
                    DirectoryStatus = subCategorySponsor.DirectoryEntry.DirectoryStatus,
                    Link2 = subCategorySponsor.DirectoryEntry.Link2,
                    Link3 = subCategorySponsor.DirectoryEntry.Link3,
                    Location = subCategorySponsor.DirectoryEntry.Location,
                    Note = subCategorySponsor.DirectoryEntry.Note,
                    Processor = subCategorySponsor.DirectoryEntry.Processor,
                    SubCategoryId = subCategorySponsor.DirectoryEntry.SubCategoryId,
                    CreateDate = subCategorySponsor.DirectoryEntry.CreateDate,
                    UpdateDate = subCategorySponsor.DirectoryEntry.UpdateDate,

                    IsSponsored = true,
                    Link2Name = link2Name,
                    Link3Name = link3Name
                } : null
            };

    @await Html.PartialAsync("_SponsoredListingSubCategoryPartial", subCategorySponsorModel)
}
<ul class="blank_list_item">
    @foreach (var viewModel in viewModelList)
    {
        viewModel.LinkType = DirectoryManager.DisplayFormatting.Enums.LinkType.ListingPage;

        if (sponsoredListings.FirstOrDefault(x => x.DirectoryEntryId == viewModel.DirectoryEntryId) != null)
        {
            viewModel.IsSponsored = true;
            viewModel.DisplayAsSponsoredItem = true;
            viewModel.LinkType = DirectoryManager.DisplayFormatting.Enums.LinkType.Direct;
        }

        @await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
    }
</ul>


    @{
        var categoryKey = Model.Category.CategoryKey;
        var subCategoryKey = Model.SubCategoryKey;
        int totalPages = (int)Math.Ceiling(Model.PagedEntries.TotalCount / (double)Model.PageSize);
        int currentPage = Model.CurrentPage;
    }

    <nav aria-label="Pagination">
        <ul class="pagination">
            @for (int p = 1; p <= totalPages; p++)
            {
                // build the path fragment
                string rawPath = $"/{categoryKey}/{subCategoryKey}"
                + (p > 1 ? $"?page={p}" : "");

                // first page on canonical root, rest via app domain
                string href = p == 1
                ? UrlResolver.BaseUrl.TrimEnd('/') + rawPath
                : UrlResolver.Resolve(rawPath);

                string linkClass = p == 1 ? "no-app-link" : "app-link";
                string activeClass = p == currentPage ? "active" : "";

                <li class="page-item @activeClass">
                    <a class="page-link @linkClass" href="@href">
                        @p
                    </a>
                </li>
            }
        </ul>
    </nav>



<hr />

@await Html.PartialAsync("_SponsoredListingPartial")

 }