@using DirectoryManager.Data.Enums
@using DirectoryManager.Data.Models
@using DirectoryManager.Data.Repositories.Interfaces
@using DirectoryManager.Web.Constants
@using DirectoryManager.Web.Helpers
@using DirectoryManager.Web.Models
@model DirectoryManager.DisplayFormatting.Models.DirectoryEntryViewModel
@inject DirectoryManager.Web.Services.Interfaces.ICacheService cacheHelper
@inject ICategoryRepository categoryRepo
@inject ISubcategoryRepository subCatRepo
@inject DirectoryManager.Web.Services.Interfaces.IUrlResolutionService UrlResolver

@{
    ViewData["Title"] = Model.Name;
    var categoryKey = ViewBag.CategoryKey as string;
    var subCategoryKey = ViewBag.SubCategoryKey as string;
    var categoryName = ViewBag.CategoryName as string;
    var subCategoryName = ViewBag.SubCategoryName as string;

    ViewData["CurrentCategoryKey"] = categoryKey;
    ViewData["CurrentSubCategoryKey"] = subCategoryKey;

    // Determine which links to use based on the availability of "A" versions
    var finalLink = !string.IsNullOrEmpty(Model.LinkA) && !Model.IsSponsored ? Model.LinkA : Model.Link;
    var finalLink2 = !string.IsNullOrEmpty(Model.Link2A) && !Model.IsSponsored ? Model.Link2A : Model.Link2;
    var finalLink3 = !string.IsNullOrEmpty(Model.Link3A) && !Model.IsSponsored ? Model.Link3A : Model.Link3;
    var domain = cacheHelper.GetSnippet(SiteConfigSetting.CanonicalDomain);

    // Build your breadcrumb list dynamically based on page context
    var breadcrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem { Position = 1, Name = "Home", Url = UrlHelper.MakeFullUrl(domain,"/") },
        new BreadcrumbItem { Position = 2, Name = @categoryName, Url = UrlHelper.MakeFullUrl(domain,$"/{@categoryKey}") },
        new BreadcrumbItem { Position = 3, Name = @subCategoryName, Url = UrlHelper.MakeFullUrl(domain,$"/{@categoryKey}/{@subCategoryKey}")  },
        new BreadcrumbItem { Position = 4, Name = Model.Name, Url = UrlHelper.MakeFullUrl(domain,$"/{@categoryKey}/{@subCategoryKey}/{@Model.DirectoryEntryKey}")  }
    };
}


@{
    Layout = "_LayoutWithNav";
}


@section PageContent {
    <div class="top-section search-section search-top-align">
        @await Html.PartialAsync("_SearchForm")
    </div>

    <div class="directory-entry-details container py-4">
        <h1 class="mb-3">@Model.Name</h1>
        <hr />
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a class="no-app-link" href="@UrlResolver.ResolveToRoot("~/")">Home</a>
                </li>
                <li class="breadcrumb-item">
                    <a class="no-app-link" href="~/@categoryKey">@categoryName</a>
                </li>
                <li class="breadcrumb-item">
                    <a class="no-app-link" href="~/@categoryKey/@subCategoryKey">@subCategoryName</a>
                </li>
                <li class="breadcrumb-item" aria-current="page">
                    @Model.Name
                </li>
            </ol>
        </nav>

   
        @{
            var sponsoredClass = Model.IsSponsored ? "sponsor-card" : "";
        }

        <div class="card mb-4 ">
            <div class="card-body">
                <table class="table table-borderless mb-0">
                    <tbody>
                        <tr>
                            <th scope="row">Name</th>
                            <td>
                                <div class="@sponsoredClass"><strong>@Model.Name</strong></div>
                            </td>
                        </tr>
                        @if (!string.IsNullOrEmpty(finalLink))
                        {
                            <tr>
                                <th scope="row">Website</th>
                                <td><b><a class="multi-line-text" href="@finalLink" target="_blank">@Model.Link</a></b></td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(finalLink2))
                        {
                            <tr>
                                <th scope="row">@Model.Link2Name</th>
                                <td><a class="multi-line-text" href="@finalLink2" target="_blank">@Model.Link2</a></td>
                            </tr>
                         
                        }
                        @if (!string.IsNullOrEmpty(finalLink3))
                        {
                            <tr>
                                <th scope="row">@Model.Link3Name</th>
                                <td><a class="multi-line-text" href="@finalLink2" target="_blank">@Model.Link3</a></td>
                            </tr>
                        }
                        <tr>
                            <th scope="row">Status</th>
                            <td>@Model.DirectoryStatus.ToHtmlIcon() @Model.DirectoryStatus</td>
                        </tr>
                        @if (!string.IsNullOrEmpty(Model.Contact))
                        {
                            <tr>
                                <th scope="row">Contact</th>
                                <td><span class="multi-line-text">@Model.Contact</span></td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.Location) || !string.IsNullOrWhiteSpace(Model.CountryCode))
                        {
                            <tr>
                                <th scope="row">Location</th>
                                <td>
                                    @Model.Location
                                    @if (!string.IsNullOrEmpty(Model.CountryCode))
                                    {
                                        var iso = Model.CountryCode.Trim().ToLowerInvariant();
                                        var src = $"/images/flags/{iso}.png";
                                        <img class="country-flag ms-2" src="@src" alt="Flag of @Model.CountryCode" title="@Model.CountryCode" />
                                    }
                                </td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.Processor))
                        {
                            <tr>
                                <th scope="row">Processor</th>
                                <td>@Model.Processor</td>
                            </tr>
                        }
                        <tr>
                            <th scope="row">Added On</th>
                            <td>@Model.CreateDate.ToString(DirectoryManager.Common.Constants.StringConstants.DateFormat)</td>
                        </tr>
                        @if (Model.UpdateDate.HasValue)
                        {
                            <tr>
                                <th scope="row">Last Updated</th>
                                <td>@Model.UpdateDate.Value.ToString(DirectoryManager.Common.Constants.StringConstants.DateFormat)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(finalLink))
        {
            <br />
            <a href="@finalLink" class="btn btn-primary" target="_blank">Visit Website</a>
            <br />
        }

        @if (!string.IsNullOrEmpty(Model.Description))
        {
            <br />
            <div class="mb-4">
                <h3>Description</h3>
                <p>@Model.Description</p>
            </div>
        }

        @if (!string.IsNullOrEmpty(Model.Note))
        {
            <br />
            <div class="mb-4">
                <h4>Note</h4>
                <p><em>@Html.Raw(Model.Note)</em></p>
            </div>
        }

        @if (Model.Tags?.Any() ?? false)
        {
            <br />
            <div class="entry-tags">
                <strong>Tags:</strong>
                @for (int i = 0; i < Model.Tags.Count; i++)
                {
                    var tag = Model.Tags[i];
                    // slugify by replacing spaces with hyphens
                    var slug = tag.Replace(" ", "-").ToLowerInvariant();
                    <a href="~/tagged/@slug">@tag</a>@if (i < Model.Tags.Count - 1){
                    <text>, </text>
                }
            }
        </div>
    }

        <hr />
        @await Html.PartialAsync("_SponsoredListingPartial")
    </div>
}
