@using DirectoryManager.Data.Models
@using DirectoryManager.Data.Models.SponsoredListings
@using DirectoryManager.DisplayFormatting.Helpers
@using DirectoryManager.DisplayFormatting.Models
@using DirectoryManager.Web.Constants
@using DirectoryManager.Web.Helpers
@using DirectoryManager.Web.Models
@using DirectoryManager.Data.Enums
@inject DirectoryManager.Web.Services.Interfaces.ICacheService cacheHelper
@inject DirectoryManager.Data.Repositories.Interfaces.IDirectoryEntryRepository directoryEntryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.ISponsoredListingRepository sponsoredListingRepository
@model IEnumerable<DirectoryEntry>

@{
    ViewData[StringConstants.TitleHeader] = $"{Html.Raw(await cacheHelper.GetSnippetAsync(SiteConfigSetting.SiteName))} - Listings with Status: {ViewBag.Status}";
    ViewData[StringConstants.MetaContent] = Html.Raw(await cacheHelper.GetSnippetAsync(SiteConfigSetting.HomePageMetaTags));
    Layout = "_CenteredLayout";

    var filteredEntries = ViewBag.FilteredEntries as IEnumerable<DirectoryEntry>;
    var filteredSubcategories = ViewBag.FilteredSubcategories as IEnumerable<Subcategory>;
    var filteredCategories = ViewBag.FilteredCategories as IEnumerable<Category>;
    var mainSponsors = ViewBag.MainSponsors as IEnumerable<SponsoredListing>;
    var subCategorySponsors = ViewBag.SubCategorySponsors as IEnumerable<SponsoredListing>;
    var categorySponsors = ViewBag.CategorySponsors as IEnumerable<SponsoredListing>;
    var link2Name = ViewBag.Link2Name as string;
    var link3Name = ViewBag.Link3Name as string;
}

@section PageContent {

<h1>Listings with Status: @ViewBag.Status</h1>

@await Html.PartialAsync("_BackToHome")
<hr />

<div class="top-container">
    <div class="top-container-left-column">
        <p class="centered-text"><b>Last Update:</b> @directoryEntryRepository.GetLastRevisionDate().ToString(DirectoryManager.Common.Constants.StringConstants.DateTimeFormat)</p>
    </div>
    <div class="top-container-right-column">
            @Html.Raw(await cacheHelper.GetSnippetAsync(SiteConfigSetting.TopMenuActionsHtml))
    </div>
</div>

<hr />
    @Html.Raw(await cacheHelper.GetSnippetAsync(SiteConfigSetting.DirectoryLegendHtml))
<hr />

<!-- Render Main Sponsors -->
@if (mainSponsors != null && mainSponsors.Any())
{
    <div>
        @await Html.PartialAsync("_SponsoredListingPartial", mainSponsors)
    </div>
}
<hr />

@if (filteredEntries != null && filteredEntries.Any())
{
    foreach (var category in filteredCategories)
    {
        <h2 id="@category.CategoryKey">@category.Name</h2>

        @if (!string.IsNullOrEmpty(category.Description))
        {
            <p>@Html.Raw(category.Description)</p>
        }
        @if (!string.IsNullOrEmpty(category.Note))
        {
            <p><i>Note: @Html.Raw(category.Note)</i></p>
        }

        // find the sponsor for this category (if any)
        var catSponsor = categorySponsors
                            .FirstOrDefault(s =>
                                s.DirectoryEntry?.SubCategory?.CategoryId == category.CategoryId);

        var catSponsorCount = filteredCategories.Count();

        var categorySponsorModel = new DirectoryManager.Web.Models.CategorySponsorModel()
        {
            CategoryId = category.CategoryId,
            TotalActiveCategoryListings = catSponsorCount,
            DirectoryEntry = (catSponsor != null && catSponsor.DirectoryEntry != null) ? new DirectoryManager.DisplayFormatting.Models.DirectoryEntryViewModel()
            {
                CreateDate = catSponsor.DirectoryEntry.CreateDate,
                UpdateDate = catSponsor.DirectoryEntry.UpdateDate,
                DateOption = DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.NotDisplayed,
                Link = catSponsor.DirectoryEntry.Link,
                Link2 = catSponsor.DirectoryEntry.Link2,
                Link3 = catSponsor.DirectoryEntry.Link3,
                Name = catSponsor.DirectoryEntry.Name,
                Contact = catSponsor.DirectoryEntry.Contact,
                Description = catSponsor.DirectoryEntry.Description,
                DirectoryEntryId = catSponsor.DirectoryEntry.DirectoryEntryId,
                DirectoryStatus = catSponsor.DirectoryEntry.DirectoryStatus,
                Location = catSponsor.DirectoryEntry.Location,
                Note = catSponsor.DirectoryEntry.Note,
                Processor = catSponsor.DirectoryEntry.Processor,
                SubCategoryId = catSponsor.DirectoryEntry.SubCategoryId,
                IsSponsored = true,
                DisplayAsSponsoredItem = false,
                Link2Name = link2Name,
                Link3Name = link3Name
            } : null
        };
        @await Html.PartialAsync("_SponsoredListingCategoryPartial", categorySponsorModel)

        if (catSponsor?.DirectoryEntry != null)
        {
            // mark it sponsored & keep it for the regular list
            var sponsoredVm = new DirectoryManager.DisplayFormatting.Models.DirectoryEntryViewModel
            {
                CreateDate = catSponsor.DirectoryEntry.CreateDate,
                UpdateDate = catSponsor.DirectoryEntry.UpdateDate,
                DateOption = DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.NotDisplayed,
                IsSponsored = true,
                DisplayAsSponsoredItem = false,
                    Link2Name = await cacheHelper.GetSnippetAsync(SiteConfigSetting.Link2Name),
                    Link3Name = await cacheHelper.GetSnippetAsync(SiteConfigSetting.Link3Name),
                Link = catSponsor.DirectoryEntry.Link,
                Link2 = catSponsor.DirectoryEntry.Link2,
                Link3 = catSponsor.DirectoryEntry.Link3,
                Name = catSponsor.DirectoryEntry.Name,
                Contact = catSponsor.DirectoryEntry.Contact,
                Description = catSponsor.DirectoryEntry.Description,
                DirectoryEntryId = catSponsor.DirectoryEntry.DirectoryEntryId,
                DirectoryStatus = catSponsor.DirectoryEntry.DirectoryStatus,
                Location = catSponsor.DirectoryEntry.Location,
                Note = catSponsor.DirectoryEntry.Note,
                Processor = catSponsor.DirectoryEntry.Processor,
                SubCategoryId = catSponsor.DirectoryEntry.SubCategoryId
            };
            // fetch normal entries
            var normalEntries = await directoryEntryRepository
                                      .GetActiveEntriesBySubcategoryAsync(category.CategoryId);
            var viewModelList = DirectoryManager.DisplayFormatting.Helpers.ViewModelConverter
                                    .ConvertToViewModels(
                                        normalEntries.ToList(),
                                        DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.NotDisplayed,
                                        DirectoryManager.DisplayFormatting.Enums.ItemDisplayType.Normal,
                                        sponsoredVm.Link2Name,
                                        sponsoredVm.Link3Name
                                    );
            // insert sponsored item at the top
            viewModelList.Insert(0, sponsoredVm);
        }
        else
        {
            // no category sponsor: just build your regular list
            var normalEntries = await directoryEntryRepository
                                      .GetActiveEntriesBySubcategoryAsync(category.CategoryId);
            var viewModelList = DirectoryManager.DisplayFormatting.Helpers.ViewModelConverter
                                    .ConvertToViewModels(
                                        normalEntries.ToList(),
                                        DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.NotDisplayed,
                                        DirectoryManager.DisplayFormatting.Enums.ItemDisplayType.Normal,
                                           await cacheHelper.GetSnippetAsync(SiteConfigSetting.Link2Name),
                                           await cacheHelper.GetSnippetAsync(SiteConfigSetting.Link3Name)
                                    );
        }


        foreach (var subCategory in filteredSubcategories.Where(sc => sc.CategoryId == category.CategoryId))
        {
            <h3 id="@category.CategoryKey-@subCategory.SubCategoryKey">@subCategory.Name</h3>

            @if (!string.IsNullOrEmpty(subCategory.Description))
            {
                <p>@Html.Raw(subCategory.Description)</p>
            }
            @if (!string.IsNullOrEmpty(subCategory.Note))
            {
                <p><i>Note: @Html.Raw(subCategory.Note)</i></p>
            }

            // Render subcategory sponsor if it exists or show "Advertise here" link
            var subCategorySponsor = subCategorySponsors?.FirstOrDefault(s => s.SubCategoryId == subCategory.SubCategoryId);

            if (subCategorySponsor != null && subCategorySponsor.DirectoryEntry != null)
            {
                var subCategorySponsorModel = new SubcategorySponsorModel
                            {
                                SubCategoryId = subCategory.SubCategoryId,
                                TotalActiveSubCategoryListings = filteredEntries.Count(e => e.SubCategoryId == subCategory.SubCategoryId),
                                DirectoryEntry = new DirectoryEntryViewModel
                                {
                                    Name = subCategorySponsor.DirectoryEntry.Name,
                                    Link = subCategorySponsor.DirectoryEntry.Link,
                                    Link2 = subCategorySponsor.DirectoryEntry.Link2,
                                    Link3 = subCategorySponsor.DirectoryEntry.Link3,
                                    Description = subCategorySponsor.DirectoryEntry.Description,
                                    CreateDate = subCategorySponsor.DirectoryEntry.CreateDate,
                                    UpdateDate = subCategorySponsor.DirectoryEntry.UpdateDate,
                                    DirectoryEntryId = subCategorySponsor.DirectoryEntry.DirectoryEntryId,
                                    DirectoryStatus = subCategorySponsor.DirectoryEntry.DirectoryStatus,
                                    IsSponsored = true,
                                    Link2Name = link2Name,
                                    Link3Name = link3Name
                                }
                            };

                @await Html.PartialAsync("_SponsoredListingSubCategoryPartial", subCategorySponsorModel)
            }
            else if (filteredEntries.Count(e => e.SubCategoryId == subCategory.SubCategoryId) >= DirectoryManager.Common.Constants.IntegerConstants.MinRequiredSubcategories)
            {
                var advertiseModel = new SubcategorySponsorModel
                            {
                                SubCategoryId = subCategory.SubCategoryId,
                                TotalActiveSubCategoryListings = filteredEntries.Count(e => e.SubCategoryId == subCategory.SubCategoryId)
                            };

                @await Html.PartialAsync("_SponsoredListingSubCategoryPartial", advertiseModel)
            }

            // Render directory entries excluding the subcategory sponsor
            var subCategoryEntries = filteredEntries
                .Where(e => e.SubCategoryId == subCategory.SubCategoryId &&
                            (subCategorySponsor == null || e.DirectoryEntryId != subCategorySponsor.DirectoryEntryId))
                .OrderBy(e => e.Name);

            var viewModelList = ViewModelConverter.ConvertToViewModels(
                subCategoryEntries.ToList(),
                DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.NotDisplayed,
                DirectoryManager.DisplayFormatting.Enums.ItemDisplayType.Normal,
                link2Name,
                link3Name
            );

            <ul class="blank_list_item">
                @foreach (var viewModel in viewModelList)
                {
                    // Check if the entry is a main sponsor and render differently
                    var isMainSponsor = mainSponsors?.Any(m => m.DirectoryEntryId == viewModel.DirectoryEntryId) ?? false;
                    if (isMainSponsor)
                    {
                        viewModel.IsSponsored = true;
                        viewModel.DisplayAsSponsoredItem = true;
                    }

                    @await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
                }
            </ul>
        }

        <hr />
    }
}
else
{
    <p>No entries found with the status: @ViewBag.Status</p>
}
}