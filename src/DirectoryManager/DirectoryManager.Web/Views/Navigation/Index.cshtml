@using DirectoryManager.Data.Models
@using DirectoryManager.DisplayFormatting.Enums
@using DirectoryManager.Web.Constants
@using DirectoryManager.Data.Enums
@model DirectoryManager.Data.Models.Category

@inject DirectoryManager.Data.Repositories.Interfaces.ICategoryRepository categoryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.ISubcategoryRepository subCategoryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.IDirectoryEntryRepository directoryEntryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.IDirectoryEntrySelectionRepository directoryEntrySelectionRepository
@inject DirectoryManager.Data.Repositories.Interfaces.ISponsoredListingRepository sponsoredListingRepository
@inject DirectoryManager.Web.Services.Interfaces.ICacheService cacheHelper

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData[StringConstants.TitleHeader] = Html.Raw(await cacheHelper.GetSnippetAsync(SiteConfigSetting.HomePageTitle));
    ViewData[StringConstants.MetaContent] = Html.Raw(await cacheHelper.GetSnippetAsync(SiteConfigSetting.HomePageMetaTags));
}

<style>
    
</style>

@{
    // 1) grab your data once
    var activeCategories = await categoryRepository.GetActiveCategoriesAsync();
    // build a lookup to avoid awaiting inside the loop
    var subsByCategory = new Dictionary<int, List<Subcategory>>();
    foreach (var cat in activeCategories)
    {
        subsByCategory[cat.CategoryId] = (await subCategoryRepository
            .GetActiveSubcategoriesAsync(cat.CategoryId))
            .ToList();
    }
}
<!-- MOBILE NAV (uses nested <details> which works out of the box) -->
<details class="mobile-nav">
    <summary>Menu</summary>
    <ul>
        @foreach (var cat in activeCategories)
        {
            <li>
                <details>
                    <summary>
                        <a class="no-app-link" href="@Url.Content($"~/{cat.CategoryKey}")">
                            @cat.Name
                        </a>
                    </summary>
                    <ul>
                        @foreach (var sub in subsByCategory[cat.CategoryId])
                        {
                            <li>
                                <a class="no-app-link"
                                   href="@Url.Content($"~/{cat.CategoryKey}/{sub.SubCategoryKey}")">
                                    @sub.Name
                                </a>
                            </li>
                        }
                    </ul>
                </details>
            </li>
        }
    </ul>
</details>

<!-- DESKTOP SIDEBAR -->
<nav class="sidebar">
    <ul>
        @foreach (var cat in activeCategories)
        {
            var checkboxId = $"{cat.CategoryKey}_expander";
            <li class="category-item">
                <label for="@checkboxId" class="expander">+</label>
                <a class="no-app-link" href="@Url.Content($"~/{cat.CategoryKey}")">
                    @cat.Name
                </a>
                <input type="checkbox"
                       id="@checkboxId"
                       class="hidden-toggle" />
                <div class="hidden">
                    <ul>
                        @foreach (var sub in subsByCategory[cat.CategoryId])
                        {
                            <li>
                                <a class="no-app-link"
                                   href="@Url.Content($"~/{cat.CategoryKey}/{sub.SubCategoryKey}")">
                                    @sub.Name
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </li>
        }
    </ul>
</nav>



<main class="main">
    <div class="content-wrapper">
    <!-- Hero and sponsored listing partial (stays full‐width under the fixed sidebar) -->
        @Html.Raw(await cacheHelper.GetSnippetAsync(SiteConfigSetting.HomePageDisplayHtml))
    @await Html.PartialAsync("_SponsoredListingPartial")
    <hr />

        <!-- everything from here down is centered under the hero -->
        <p class="intro">
            @Html.Raw(await cacheHelper.GetSnippetAsync(SiteConfigSetting.TextIntro))
        </p>
        <hr />

        <div class="top-container">
            <!-- Update Section -->
            <div class="top-section update-section">
                <p class="centered-text">
                    <strong>Last Update:</strong>
                    @directoryEntryRepository.GetLastRevisionDate().ToString(DirectoryManager.Common.Constants.StringConstants.DateTimeFormat)
                </p>
            </div>

            <!-- Search Section -->
            <div class="top-section search-section">
                @await Html.PartialAsync("_SearchForm")
            </div>

            <!-- Links Section -->
            <div class="top-section links-section">
                @Html.Raw(await cacheHelper.GetSnippetAsync(SiteConfigSetting.TopMenuActionsHtml))
            </div>
        </div>
        <hr />

        @Html.Raw(await cacheHelper.GetSnippetAsync(SiteConfigSetting.DirectoryLegendHtml))

        @* Featured *@
        @{
            var featuredEntries = await directoryEntrySelectionRepository
            .GetEntriesForSelection(EntrySelectionType.Featured);
            var link2Name = await cacheHelper.GetSnippetAsync(SiteConfigSetting.Link2Name);
            var link3Name = await cacheHelper.GetSnippetAsync(SiteConfigSetting.Link3Name);
        }
        @if (featuredEntries?.Any() == true)
        {
            <hr />
            <p><b>Featured</b></p>
            <ul class="blank_list_item">
                @{
                    var vmList = DirectoryManager.DisplayFormatting.Helpers.ViewModelConverter
                        .ConvertToViewModels(
                    featuredEntries.ToList(),
                    DateDisplayOption.NotDisplayed,
                    ItemDisplayType.Featured,
                    link2Name, link3Name);
                }
                @foreach (var vm in vmList)
                {
                    @await Html.PartialAsync("_DirectoryEntryPartial", vm)
                }
            </ul>
        }

        @* Newest Additions *@
        @{
            var newest = await directoryEntryRepository.GetNewestAdditions(10);
        }
        @if (newest?.Any() == true)
        {
            <hr />
            <p><b>Newest Additions</b></p>
            <i>
                See:
                <a href="~/newest">all new additions</a>
                or
                <a class="no-app-link" href="~/rss/feed.xml">RSS</a>
            </i>
            <ul class="blank_list_item">
                @{
                    var vmList = DirectoryManager.DisplayFormatting.Helpers.ViewModelConverter
                        .ConvertToViewModels(
                    newest.ToList(),
                    DateDisplayOption.DisplayCreateDate,
                    ItemDisplayType.Featured,
                    link2Name, link3Name);
                }
                @foreach (var vm in vmList)
                {
                    vm.LinkType = LinkType.Direct;
                    @await Html.PartialAsync("_DirectoryEntryPartial", vm)
                }
            </ul>
            <hr />
        }

        @* Newest Revisions *@
        @{
            var revisions = await directoryEntryRepository.GetNewestRevisions(6);
            if (newest != null)
            {
                revisions = revisions.Except(newest).Take(6).ToList();
            }
        }
        @if (revisions?.Any() == true)
        {
            <p><b>Newest Revisions</b></p>
            <ul class="blank_list_item">
                @{
                    var vmList = DirectoryManager.DisplayFormatting.Helpers.ViewModelConverter
                        .ConvertToViewModels(
                    revisions.ToList(),
                    DateDisplayOption.DisplayUpdateDate,
                    ItemDisplayType.NewestRevions,
                    link2Name, link3Name);
                }
                @foreach (var vm in vmList)
                {
                    vm.LinkType = LinkType.Direct;
                    @await Html.PartialAsync("_DirectoryEntryPartial", vm)
                }
            </ul>
            <hr />
        }
 
    </div>
</main>
