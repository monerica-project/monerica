@using DirectoryManager.Web.Services.Interfaces
@using Microsoft.AspNetCore.Html
@using System.Text.RegularExpressions
@using System.Net
@using System.Text.Json
@model DirectoryManager.Web.Models.EntryReviewsBlockViewModel
@inject IUrlResolutionService Urls

@functions {
    // ★ helper
    public static string Stars(byte? rating)
    {
        if (rating is null || rating.Value < 1) return "☆☆☆☆☆";
        var n = Math.Min(5, Math.Max(1, (int)rating.Value));
        return new string('★', n) + new string('☆', 5 - n);
    }

    // CSS class so long links wrap onto multiple lines
    private const string LinkClass = "multi-line-text";

    // Precompiled URL regex: http(s)://... or www....
    private static readonly Regex UrlRegex = new(
        @"(?:(?:https?://)|(?:www\.))[\w\-\.]+(?:\.[a-z]{2,})(?:[^\s<]*)?",
        RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.Compiled);

    // Render body: encode text, auto-link URLs, preserve newlines
    public static IHtmlContent RenderBodyWithLinks(string? text)
    {
        if (string.IsNullOrEmpty(text))
            return new HtmlString(string.Empty);

        var sb = new System.Text.StringBuilder();
        int last = 0;

        foreach (Match m in UrlRegex.Matches(text))
        {
            // encode text before the link (preserve newlines)
            string before = WebUtility.HtmlEncode(text.Substring(last, m.Index - last))
                                      .Replace("\r\n", "\n").Replace("\n", "<br/>");
            sb.Append(before);

            // raw match and any trailing punctuation to exclude from URL
            string raw = m.Value;
            string trimmed = raw.TrimEnd('.', ',', ';', ')', ']', '}', '!', '?');
            string trailing = raw.Substring(trimmed.Length);

            // ensure scheme for www.* links
            string href = trimmed.StartsWith("www.", StringComparison.OrdinalIgnoreCase)
                ? $"https://{trimmed}"
                : trimmed;

            // Safe attributes and visible text
            string hrefAttr = WebUtility.HtmlEncode(href);
            string visible = WebUtility.HtmlEncode(trimmed);

            sb.Append($"<a class=\"{LinkClass}\" href=\"{hrefAttr}\" target=\"_blank\" rel=\"noopener noreferrer nofollow ugc\">{visible}</a>");

            if (trailing.Length > 0)
                sb.Append(WebUtility.HtmlEncode(trailing));

            last = m.Index + m.Length;
        }

        // Tail after last match
        string tail = WebUtility.HtmlEncode(text.Substring(last))
                                .Replace("\r\n", "\n").Replace("\n", "<br/>");
        sb.Append(tail);

        return new HtmlString(sb.ToString());
    }
}

@{
    // Current page URL for JSON-LD itemReviewed @id
    var pageUrl = this.ViewData[DirectoryManager.Web.Constants.StringConstants.CanonicalUrl];
}

<div class="reviews-block mt-4">
    <h3 class="mb-3">Reviews</h3>

    @if (Model.ReviewCount > 0)
    {
        <p>
            <strong>Average rating:</strong>
            @(Model.AverageRating?.ToString("0.0") ?? "-") / 5
            <span class="text-muted">(@Model.ReviewCount @(Model.ReviewCount == 1 ? "review" : "reviews"))</span>
        </p>

        <ul class="list-unstyled">
            @foreach (var r in Model.Reviews)
            {
                <li class="mb-4 pb-3 border-bottom" itemscope itemtype="https://schema.org/Review">
                    <div class="d-flex align-items-center">
                        <span class="me-2" aria-label="rating">@Stars(r.Rating)</span>
                        <small class="text-muted">@((r.Rating ?? 0))/5</small>

                        <!-- reviewRating microdata -->
                        <span itemprop="reviewRating" itemscope itemtype="https://schema.org/Rating">
                            <meta itemprop="ratingValue" content="@((r.Rating ?? 0))" />
                            <meta itemprop="bestRating" content="5" />
                            <meta itemprop="worstRating" content="1" />
                        </span>
                    </div>

                    <div class="mt-2" itemprop="reviewBody">
                        @RenderBodyWithLinks(r.Body)
                    </div>

                    <div class="mt-2">
                        <!-- author microdata -->
                        <span itemprop="author" itemscope itemtype="https://schema.org/Person">
                            <small class="text-muted">Author: <span itemprop="name">@r.AuthorFingerprint</span></small>
                        </span>
                        <small class="text-muted ms-2">•</small>
                        <!-- datePublished microdata -->
                        <time class="text-muted ms-2" itemprop="datePublished" datetime="@r.CreateDate.ToString(DirectoryManager.Common.Constants.StringConstants.DateFormat)">
                            @r.CreateDate.ToString(DirectoryManager.Common.Constants.StringConstants.DateFormat)
                        </time>
                    </div>
                </li>
            }
        </ul>

        @* JSON-LD: AggregateRating + individual Review objects referencing this page as itemReviewed *@
        {
            var graph = new List<object>();

            if (Model.AverageRating.HasValue && Model.ReviewCount > 0)
            {
                graph.Add(new
                {
                    @type = "AggregateRating",
                    itemReviewed = new { @id = pageUrl },
                    ratingValue = Math.Round(Model.AverageRating.Value, 1),
                    ratingCount = Model.ReviewCount,
                    bestRating = 5,
                    worstRating = 1
                });
            }

            foreach (var r in Model.Reviews)
            {
                graph.Add(new
                {
                    @type = "Review",
                    itemReviewed = new { @id = pageUrl },
                    reviewRating = new
                    {
                        @type = "Rating",
                        ratingValue = (int)(r.Rating ?? 0),
                        bestRating = 5,
                        worstRating = 1
                    },
                    author = new { @type = "Person", name = r.AuthorFingerprint },
                    datePublished = r.CreateDate.ToString(DirectoryManager.Common.Constants.StringConstants.DateFormat),
                    reviewBody = r.Body ?? string.Empty
                });
            }

            var jsonLd = JsonSerializer.Serialize(new
            {
                @context = "https://schema.org",
                @graph = graph
            }, new JsonSerializerOptions { Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping });

            <script type="application/ld+json">
                @Html.Raw(jsonLd)
            </script>
        }
    }
    else
    {
        <p class="text-muted">No reviews yet.</p>
    }

    <form action="@Urls.ResolveToApp("/directory-entry-reviews/begin")" method="post" class="d-inline" rel="nofollow">
        <input type="hidden" name="directoryEntryId" value="@Model.DirectoryEntryId" />
        <button type="submit">Leave a review</button>
    </form>
</div>
