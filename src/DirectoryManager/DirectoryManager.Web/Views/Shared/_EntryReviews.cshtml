@using DirectoryManager.Web.Services.Interfaces
@using Microsoft.AspNetCore.Html
@using System.Text.RegularExpressions
@using System.Net
@model DirectoryManager.Web.Models.EntryReviewsBlockViewModel
@inject IUrlResolutionService Urls

@functions {
    // ⭐ helper
    public static string Stars(byte? rating)
    {
        if (rating is null || rating.Value < 1) return "☆☆☆☆☆";
        var n = Math.Min(5, Math.Max(1, (int)rating.Value));
        return new string('★', n) + new string('☆', 5 - n);
    }

    // ⛳ change to your real CSS class name if different
    private const string LinkClass = "multi-line-text";

    // Render body: encode text, auto-link URLs, keep newlines
    public static IHtmlContent RenderBodyWithLinks(string? text)
    {
        if (string.IsNullOrEmpty(text))
            return new HtmlString(string.Empty);

        // URL pattern: http(s)://... or www....
        var rx = new Regex(@"(?:(?:https?://)|(?:www\.))[\w\-\.]+(?:\.[a-z]{2,})(?:[^\s<]*)?",
                           RegexOptions.IgnoreCase | RegexOptions.Compiled);

        var sb = new System.Text.StringBuilder();
        int last = 0;

        foreach (Match m in rx.Matches(text))
        {
            // encode any text before this match
            string before = WebUtility.HtmlEncode(text.Substring(last, m.Index - last));
            sb.Append(before.Replace("\r\n", "\n").Replace("\n", "<br/>"));

            string raw = m.Value;
            string href = raw.StartsWith("www.", StringComparison.OrdinalIgnoreCase) ? $"https://{raw}" : raw;

            // attribute-safe & visible text
            string hrefAttr = WebUtility.HtmlEncode(href);
            string visible = WebUtility.HtmlEncode(raw);

            sb.Append($"<a class=\"{LinkClass}\" href=\"{hrefAttr}\" target=\"_blank\" rel=\"noopener noreferrer nofollow ugc\">{visible}</a>");

            last = m.Index + m.Length;
        }

        // tail after last match
        string tail = WebUtility.HtmlEncode(text.Substring(last));
        sb.Append(tail.Replace("\r\n", "\n").Replace("\n", "<br/>"));

        return new HtmlString(sb.ToString());
    }
}

<div class="reviews-block mt-4">
    <h3 class="mb-3">Reviews</h3>

    @if (Model.ReviewCount > 0)
    {
        <p>
            <strong>Average rating:</strong>
            @(Model.AverageRating?.ToString("0.0") ?? "-") / 5
            <span class="text-muted">(@Model.ReviewCount @(Model.ReviewCount == 1 ? "review" : "reviews"))</span>
        </p>

        <ul class="list-unstyled">
            @foreach (var r in Model.Reviews)
            {
                <li class="mb-4 pb-3 border-bottom">
                    <div class="d-flex align-items-center">
                        <span class="me-2" aria-label="rating">@Stars(r.Rating)</span>
                        <small class="text-muted">@((r.Rating ?? 0))/5</small>
                    </div>
                    <div class="mt-2">
                        @RenderBodyWithLinks(r.Body)
                    </div>
                    <div class="mt-2">
                        <small class="text-muted">Author: @r.AuthorFingerprint</small>
                        <small class="text-muted ms-2">•</small>
                        <small class="text-muted ms-2">@r.CreateDate.ToString(DirectoryManager.Common.Constants.StringConstants.DateFormat)</small>
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <p class="text-muted">No reviews yet.</p>
    }

    <form action="@Urls.ResolveToApp("/directory-entry-reviews/begin")" method="post" class="d-inline" rel="nofollow">
        <input type="hidden" name="directoryEntryId" value="@Model.DirectoryEntryId" />
        <button type="submit">Leave a review</button>
    </form>
</div>
