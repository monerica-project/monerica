@using DirectoryManager.Data.Models
@using DirectoryManager.Web.Constants;
@using DirectoryManager.Data.Enums;
@model DirectoryManager.Data.Models.Category
@inject DirectoryManager.Data.Repositories.Interfaces.ICategoryRepository categoryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.ISubcategoryRepository subCategoryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.IDirectoryEntryRepository directoryEntryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.IDirectoryEntrySelectionRepository directoryEntrySelectionRepository
@inject DirectoryManager.Data.Repositories.Interfaces.ISponsoredListingRepository sponsoredListingRepository
@inject DirectoryManager.Web.Services.Interfaces.ICacheService cacheHelper
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData[StringConstants.TitleHeader] = Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.HomePageTitle));
    ViewData[StringConstants.MetaContent] = Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.HomePageMetaTags));
}

<cache-content cache-key="@DirectoryManager.Web.Constants.StringConstants.EntriesCacheKey">
    @Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.HomePageDisplayHtml))

    <hr />

    <div class="top-container">
        <div class="top-container-left-column">
            <p class="centered-text"><b>Last Update:</b> @directoryEntryRepository.GetLastRevisionDate().ToString(DirectoryManager.Common.Constants.StringConstants.DateTimeFormat)</p>
        </div>
        <div class="top-container-right-column">
                @Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.TopMenuActionsHtml))
            </div>
        </div>

    <hr />

    @Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.DirectoryLegendHtml)) 

    <hr />
    
    @await Html.PartialAsync("_SponsoredListingPartial")

    @{
        var featuredEntries = await directoryEntrySelectionRepository.GetEntriesForSelection(DirectoryManager.Data.Enums.EntrySelectionType.Featured);
        var link2Name = cacheHelper.GetSnippet(SiteConfigSetting.Link2Name);
        var link3Name = cacheHelper.GetSnippet(SiteConfigSetting.Link3Name);
    }

    @if (featuredEntries != null && featuredEntries.Count() > 0)
    {
        <hr />
        <p><b>Featured</b></p>

        <ul class="blank_list_item">
            @{
                var viewModelList = DirectoryManager.DisplayFormatting.Helpers.ViewModelConverter.ConvertToViewModels(
                    featuredEntries.ToList(),
                DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.NotDisplayed,
                DirectoryManager.DisplayFormatting.Enums.ItemDisplayType.Featured,
                    link2Name,
                    link3Name);
            }
            @foreach (var viewModel in viewModelList)
            {
                @await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
            }
        </ul>
    }

    @{
        var newestEntries = await directoryEntryRepository.GetNewestAdditions(IntegerConstants.NewestRevisionsToDisplay);       
    }

    @if (newestEntries != null && newestEntries.Count() > 0)
    {
        <hr />
        <p><b>Newest Additions</b></p>
        <i>See: <a href="~/newest">all new additions</a> or <a class="no-app-link" href="~/rss/feed.xml">RSS</a></i>
        <ul class="blank_list_item">
            @{
                var viewModelList = DirectoryManager.DisplayFormatting.Helpers.ViewModelConverter.ConvertToViewModels(
                    newestEntries.ToList(),
                DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.DisplayCreateDate,
                DirectoryManager.DisplayFormatting.Enums.ItemDisplayType.Featured,
                    link2Name,
                    link3Name);
            }
            @foreach (var viewModel in viewModelList)
            {
                viewModel.LinkType = DirectoryManager.DisplayFormatting.Enums.LinkType.Direct;
                @await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
            }
        </ul>
        <hr />
    }

    @{
        var newestRevisions = await directoryEntryRepository.GetNewestRevisions(6);

        if ((newestRevisions != null && newestRevisions.Count() > 0) && (newestEntries != null && newestEntries.Count() > 0))
        {
            newestRevisions = newestRevisions.Except(newestEntries).ToList().Take(IntegerConstants.NewestRevisionsToDisplay);
        }
    }

    @if (newestRevisions != null && newestRevisions.Count() > 0)
    {
        <p><b>Newest Revisions</b></p>

        <ul class="blank_list_item">
            @{
                var viewModelList = DirectoryManager.DisplayFormatting.Helpers.ViewModelConverter.ConvertToViewModels(
                newestRevisions.ToList(),
                DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.DisplayUpdateDate,
                DirectoryManager.DisplayFormatting.Enums.ItemDisplayType.NewestRevion,
                link2Name,
                link3Name);
            }
            @foreach (var viewModel in viewModelList)
            {
                viewModel.LinkType = DirectoryManager.DisplayFormatting.Enums.LinkType.Direct;
                @await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
            }
        </ul>

        <hr />
    }
    @{
        var activeCategories = await categoryRepository.GetActiveCategoriesAsync();
    }
    <p><b id="categories">Categories</b></p>
    <ul id="categories_list">
        @foreach (var category in activeCategories)
        {
            <li>
                <label for="@string.Format("{0}_checkbox", category.CategoryKey)">+</label>
                <a href="#@category.CategoryKey">@category.Name</a>
                <input type="checkbox" id="@string.Format("{0}_checkbox", category.CategoryKey)" />
                <div class="hidden">
                    <ul>
                        @foreach (var subCategory in await subCategoryRepository.GetActiveSubCategoriesAsync(category.CategoryId))
                        {
                            <li>
                                <a href="#@category.CategoryKey-@subCategory.SubCategoryKey">@subCategory.Name</a>
                            </li>
                        }
                    </ul>
                </div>
            </li>
        }
    </ul>

    <hr />
    @{
        var sponsoredListings = await sponsoredListingRepository.GetActiveSponsorsByTypeAsync(SponsorshipType.MainSponsor);
        var subCategorySponsors = await sponsoredListingRepository.GetActiveSponsorsByTypeAsync(SponsorshipType.SubcategorySponsor);
    }
    @foreach (var category in activeCategories)
    {
        <h2 id="@category.CategoryKey">@category.Name</h2>
        @if (!string.IsNullOrEmpty(category.Description))
        {
            <p>@Html.Raw(category.Description)</p>
        }
        @if (!string.IsNullOrEmpty(category.Note))
        {
            <p><i>Note: @Html.Raw(category.Note)</i></p>
        }
        @foreach (var subCategory in await subCategoryRepository.GetActiveSubCategoriesAsync(category.CategoryId))
        {
            <h3 id="@category.CategoryKey-@subCategory.SubCategoryKey">@subCategory.Name</h3>
            if (!string.IsNullOrEmpty(subCategory.Description))
            {
                <p>@Html.Raw(subCategory.Description)</p>
            }
            if (!string.IsNullOrEmpty(subCategory.Note))
            {
                <i>Note: @Html.Raw(subCategory.Note)</i>
            }
            var activeEntries = await directoryEntryRepository.GetActiveEntriesByCategoryAsync(subCategory.SubCategoryId);
            var viewModelList = DirectoryManager.DisplayFormatting.Helpers.ViewModelConverter.ConvertToViewModels(
                                        activeEntries.ToList(),
            DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.NotDisplayed,
            DirectoryManager.DisplayFormatting.Enums.ItemDisplayType.Normal,
                                        link2Name,
                                        link3Name);
            var subCategorySponsor = subCategorySponsors.FirstOrDefault(x => x.SubCategoryId == subCategory.SubCategoryId);
            var subCategorySponsorModel = new DirectoryManager.Web.Models.SubCategorySponsorModel()
            {
                        SubCategoryId = subCategory.SubCategoryId,
                        TotalActiveSubCategoryListings = activeEntries.Count(),
                        DirectoryEntry = (subCategorySponsor != null && subCategorySponsor.DirectoryEntry != null) ? new DirectoryManager.DisplayFormatting.Models.DirectoryEntryViewModel()
                        {
                            CreateDate = subCategorySponsor.DirectoryEntry.CreateDate,
                            UpdateDate = subCategorySponsor.DirectoryEntry.UpdateDate,
                            DateOption = DirectoryManager.DisplayFormatting.Enums.DateDisplayOption.NotDisplayed,
                            Link = subCategorySponsor.DirectoryEntry.Link,
                            Link2 = subCategorySponsor.DirectoryEntry.Link2,
                            Link3 = subCategorySponsor.DirectoryEntry.Link3,
                            Name = subCategorySponsor.DirectoryEntry.Name,
                            Contact = subCategorySponsor.DirectoryEntry.Contact,
                            Description = subCategorySponsor.DirectoryEntry.Description,
                            DirectoryEntryId = subCategorySponsor.DirectoryEntry.DirectoryEntryId,
                            DirectoryStatus = subCategorySponsor.DirectoryEntry.DirectoryStatus,
                            Location = subCategorySponsor.DirectoryEntry.Location,
                            Note = subCategorySponsor.DirectoryEntry.Note,
                            Processor = subCategorySponsor.DirectoryEntry.Processor,
                            SubCategoryId = subCategorySponsor.DirectoryEntry.SubCategoryId,
                            IsSponsored = true,
                            DisplayAsSponsoredItem = false,
                            Link2Name = link2Name,
                            Link3Name = link3Name
                        } : null
            };
            @await Html.PartialAsync("_SponsoredListingSubCategoryPartial", subCategorySponsorModel)
            if (subCategorySponsor != null)
            {
               viewModelList.RemoveAll(x => x.DirectoryEntryId == subCategorySponsor.DirectoryEntryId);
            }
<ul class="blank_list_item">
@foreach (var viewModel in viewModelList)
{
if (sponsoredListings.FirstOrDefault(x => x.DirectoryEntryId == viewModel.DirectoryEntryId) != null)
{
    viewModel.IsSponsored = true;
    viewModel.DisplayAsSponsoredItem = true;
}
@await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
}
</ul>
        }

        <p class="right">
            <a href="#categories">&#x2191; Categories</a>
        </p>

        <hr />
    }
</cache-content>