@using DirectoryManager.Data.Models
@using DirectoryManager.DisplayFormatting.Enums
@using DirectoryManager.DisplayFormatting.Helpers
@using DirectoryManager.Web.Constants
@using DirectoryManager.Data.Enums
@using DirectoryManager.Web.Models
@model DirectoryManager.Data.Models.Category

@inject DirectoryManager.Data.Repositories.Interfaces.ICategoryRepository categoryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.ISubcategoryRepository subCategoryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.IDirectoryEntryRepository directoryEntryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.IDirectoryEntrySelectionRepository directoryEntrySelectionRepository
@inject DirectoryManager.Data.Repositories.Interfaces.ISponsoredListingRepository sponsoredListingRepository
@inject DirectoryManager.Web.Services.Interfaces.ICacheService cacheHelper
@inject DirectoryManager.Data.Repositories.Interfaces.ICategoryRepository categoryRepo
@inject DirectoryManager.Data.Repositories.Interfaces.ISubcategoryRepository subCatRepo
@inject DirectoryManager.Data.Repositories.Interfaces.IDirectoryEntryReviewRepository reviewRepository
@inject DirectoryManager.Web.Services.Interfaces.IUrlResolutionService UrlResolver
@using DirectoryManager.Utilities.Helpers

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData[StringConstants.TitleHeader] = Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.HomePageTitle));
    ViewData[StringConstants.MetaContent] = Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.HomePageMetaTags));
    ViewData["CurrentCategoryKey"]    = null;
    ViewData["CurrentSubCategoryKey"] = null;
    Layout = "_LayoutWithNav";
}

@{
    var cats = await categoryRepo.GetActiveCategoriesAsync();
}

@{
    // ----- Category sponsors -----
    var catSponsors = await sponsoredListingRepository
        .GetActiveSponsorsByTypeAsync(SponsorshipType.CategorySponsor);

    // ----- Subcategory sponsors -----
    var subSponsors = await sponsoredListingRepository
        .GetActiveSponsorsByTypeAsync(SponsorshipType.SubcategorySponsor); // ← make sure you have this
 
    var sponsorsBySubcategory = subSponsors
        .Where(s => s.DirectoryEntry?.SubCategoryId != null)
        .GroupBy(s => s.DirectoryEntry.SubCategoryId)
        .ToDictionary(g => g.Key, g => g.Select(s => s.DirectoryEntry!).ToList());
}

@{
    // load all subcategories (with Category navigation)
    var subs = await subCategoryRepository.GetAllDtoAsync();

    // build a quick lookup from SubCategoryId → Subcategory (so we can get CategoryId cheaply)
    var subById = subs.ToDictionary(sc => sc.SubcategoryId, sc => sc);

    // now group your category‐level sponsors by CategoryId
    var sponsorsByCategory = catSponsors
        // only keep ones whose DirectoryEntry & SubCategoryId we know about
        .Where(s => s.DirectoryEntry != null
                    && subById.ContainsKey(s.DirectoryEntry.SubCategoryId))
        // group by the sub’s CategoryId
        .GroupBy(s => subById[s.DirectoryEntry.SubCategoryId].CategoryId)
        // materialize into a Dictionary<CategoryId, List<DirectoryEntry>>
        .ToDictionary(
            g => g.Key,
            g => g.Select(s => s.DirectoryEntry!).ToList()
        );
}

 @section PageContent {
    <div>
        <!-- Hero and sponsored listing partial (stays full‐width under the fixed sidebar) -->
        @Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.HomePageDisplayHtml))
        @await Html.PartialAsync("_SponsoredListingPartial")
        <hr />

        <!-- everything from here down is centered under the hero -->
        <p class="intro">
            @Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.TextIntro))
        </p>
        <hr />

        <div class="top-container">
            <!-- Update Section -->
            <div class="top-section update-section">
                <p class="centered-text">
                    <strong>Last Update:</strong>
                    @directoryEntryRepository.GetLastRevisionDate().ToString(DirectoryManager.Common.Constants.StringConstants.DateTimeFormat)
                </p>
            </div>

            <!-- Search Section -->
            <div class="top-section search-section">
                @await Html.PartialAsync("_SearchForm")
            </div>

            <!-- Links Section -->
            <div class="top-section links-section">
                @Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.TopMenuActionsHtml))
            </div>
        </div>
        <hr />

        @Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.DirectoryLegendHtml))

        @* Featured *@
        @{
            var featuredEntries = await directoryEntrySelectionRepository
            .GetEntriesForSelection(EntrySelectionType.Featured);
            var link2Name = cacheHelper.GetSnippet(SiteConfigSetting.Link2Name);
            var link3Name = cacheHelper.GetSnippet(SiteConfigSetting.Link3Name);
        }
        @if (featuredEntries?.Any() == true)
        {
            <hr />
            <p><b>Featured</b></p>
            <ul class="blank_list_item">
                @{
                    var vmList = DirectoryManager.DisplayFormatting.Helpers.ViewModelConverter
                    .ConvertToViewModels(
                    featuredEntries.ToList(),
                    DateDisplayOption.NotDisplayed,
                    ItemDisplayType.Featured,
                    link2Name, link3Name);
                }
                @foreach (var vm in vmList)
                {
                    @await Html.PartialAsync("_DirectoryEntryPartial", vm)
                }
            </ul>
        }

        @* Newest Additions *@
        @{
            var newest = await directoryEntryRepository.GetNewestAdditions(10);
        }
        @if (newest?.Any() == true)
        {
            <hr />
            <p><b>Newest Additions</b></p>
            <i>
                See:
                <a href="~/newest">all new additions</a>
                or
                <a class="no-app-link" href="~/rss/feed.xml">RSS</a>
            </i>
            <ul class="blank_list_item">
                @{
                    var vmList = DirectoryManager.DisplayFormatting.Helpers.ViewModelConverter
                    .ConvertToViewModels(
                    newest.ToList(),
                    DateDisplayOption.DisplayCreateDate,
                    ItemDisplayType.Featured,
                    link2Name, link3Name);
                }
                @foreach (var vm in vmList)
                {
                    vm.LinkType = LinkType.ListingPage;
                    @await Html.PartialAsync("_DirectoryEntryPartial", vm)
                }
            </ul>
            <hr />
        }

        @* Newest Revisions *@
        @{
            var revisions = await directoryEntryRepository.GetNewestRevisions(15);
            if (newest != null)
            {
                revisions = revisions.Except(newest).Take(5).ToList();
            }
        }
        @if (revisions?.Any() == true)
        {
            <p><b>Newest Revisions</b></p>
            <ul class="blank_list_item">
                @{
                    var vmList = DirectoryManager.DisplayFormatting.Helpers.ViewModelConverter
                    .ConvertToViewModels(
                    revisions.ToList(),
                    DateDisplayOption.DisplayUpdateDate,
                    ItemDisplayType.NewestRevions,
                    link2Name, link3Name);
                }
                @foreach (var vm in vmList)
                {
                    vm.LinkType = LinkType.ListingPage;
                    @await Html.PartialAsync("_DirectoryEntryPartial", vm)
                }
            </ul>
            <hr />
        }

        <div class="sponsor-sections">
            <!-- Category Sponsors -->
            <section>
                <h2 class="section-title">Category Sponsors</h2>
                @foreach (var cat in cats)
                {
                    if (sponsorsByCategory.TryGetValue(cat.CategoryId, out var entries))
                    {
                        <span class="category-name">@cat.Name</span>
                        <ul class="blank_list_item">
                            @foreach (var e in entries)
                            {
                                var vm = ViewModelConverter
                                .ConvertToViewModels(
                                new List<DirectoryEntry> { e },
                                DateDisplayOption.NotDisplayed,
                                ItemDisplayType.CategorySponsor,
                                link2Name, link3Name)
                                .First();
                                vm.IsSponsored = true;
                                @await Html.PartialAsync("_DirectoryEntryPartial", vm)
                            }
                        </ul>
                    }
                }
            </section>

            <!-- Subcategory Sponsors -->
            <section>
                <h2 class="section-title">Subcategory Sponsors</h2>
                @foreach (var sub in subs)
                {
                    if (sponsorsBySubcategory.TryGetValue(sub.SubcategoryId, out var entries))
                    {
                        <span class="subcategory-name">
                            @Html.Raw(FormattingHelper.SubcategoryFormatting(sub.CategoryName, sub.Name))
                        </span>
                        <ul class="blank_list_item">
                            @foreach (var e in entries)
                            {
                                var vm = ViewModelConverter
                                .ConvertToViewModels(
                                new List<DirectoryEntry> { e },
                                DateDisplayOption.NotDisplayed,
                                ItemDisplayType.SubcategorySponsor,
                                link2Name, link3Name)
                                .First();
                                vm.IsSponsored = true;
                                @await Html.PartialAsync("_DirectoryEntryPartial", vm)
                            }
                        </ul>
                    }
                }
            </section>
        </div>

        @{
            var latestReviews = await reviewRepository.ListLatestApprovedAsync(15);
        }

        @if (latestReviews?.Any() == true)
        {
            <hr />
            <p><b>Latest Reviews</b></p>
            <ul class="blank_list_item">
                @foreach (var r in latestReviews)
                {
                    var e = r.DirectoryEntry;
                    if (e == null || e.SubCategory == null || e.SubCategory.Category == null)
                    {
                        continue; // can’t build a /cat/sub/entry URL
                    }

                    var listingName = e.Name ?? "Listing";
                    var rating = r.Rating.HasValue ? $"{r.Rating.Value}/5" : "—";
                    var oneLine = TextHelper.TruncateAtWord((r.Body ?? string.Empty).ReplaceLineEndings(" "), 100);

                    var url = UrlResolver.ResolveToRoot($"/{e.SubCategory.Category.CategoryKey}/{e.SubCategory.SubCategoryKey}/{e.DirectoryEntryKey}");
                    var reviewDate = (r.UpdateDate ?? r.CreateDate).ToString(DirectoryManager.Common.Constants.StringConstants.DateFormat);

                    <li>
                        <i>@reviewDate</i> <a href="@url">@listingName</a> — Rating: @rating — @oneLine
                    </li>
                }
            </ul>
        }
    </div>
    }