@using DirectoryManager.Data.Models
@using DirectoryManager.Web.Constants;
@model DirectoryManager.Data.Models.Category
@inject DirectoryManager.Data.Repositories.Interfaces.ICategoryRepository categoryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.ISubCategoryRepository subCategoryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.IDirectoryEntryRepository directoryEntryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.IDirectoryEntrySelectionRepository directoryEntrySelectionRepository
@inject DirectoryManager.Data.Repositories.Interfaces.ISponsoredListingRepository sponsoredListingRepository

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Monerica - A Directory For A Monero Circular Economy";
}

<cache-content cache-key="@DirectoryManager.Web.Constants.StringConstants.EntriesCacheKey"
               cache-duration-seconds="@DirectoryManager.Web.Constants.IntegerConstants.CacheDurationSeconds">

    <h1>Welcome To Monerica!</h1>

    <h4>A directory for a Monero circular economy</h4>

    <img style="width:333px;" src="/images/monerica-logo.png" alt="Monerica logo" />

    <p>
        The goal of Monerica is to reflect the freedom ideals of the United States of America
        in the age of cryptocurrency by using Monero. There are no borders to Monerica. One has the ability
        to transact freely and privately without the need for a bank account, without the permission of
        any third party, and without the prying eyes of those who wish to control the thoughts
        and behaviors of others through surveillance and overreaching regulations.
    </p>

    <hr />

    <p>
        <b>Last update:</b> @directoryEntryRepository.GetLastRevisionDate().ToString(StringConstants.DateTimeFormat)
    </p>

    <hr />

    <p>
        <i>
            Note: None of the provided links
            here are endorsements and some may contain affiliate links.
        </i>
    </p>

    <p>
        &#9989; - indicates someone in the community has done a successful test transaction or has used this software/
        service
    </p>
    <p>
        &#10060; - indicates someone in the community has reported this a scam
    </p>

    <p>
        <b>Submit new or change existing links: <a class="button-link" href="~/submit">here</a>.</b>
        Follow on: <a target="_blank" href="https://twitter.com/MonericaProject">Twitter</a>.
    </p>

    <hr />

    @await Html.PartialAsync("_SponsoredListingPartial")

    <hr />

    @{
        var featuredEntries = await directoryEntrySelectionRepository.GetEntriesForSelection(DirectoryManager.Data.Enums.EntrySelectionType.Featured);
    }

    @if (featuredEntries != null && featuredEntries.Count() > 0)
    {
        <p><b>Featured</b></p>

        <ul>
            @{
                var viewModelList = DirectoryManager.Web.Helpers.ViewModelConverter.ConvertToViewModels(
                featuredEntries.ToList(),
                DirectoryManager.Web.Enums.DateDisplayOption.NotDisplayed);
            }
            @foreach (var viewModel in viewModelList)
            {
                @await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
            }
        </ul>
        <hr />
    }

    @{
        var newestEntries = await directoryEntryRepository.GetNewestAdditions(3);
    }

    @if (newestEntries != null && newestEntries.Count() > 0)
    {

        <p><b>Newest Additions</b></p>
        <i>See: <a href="~/newest">all new additions</a></i>
        <ul>
            @{
                var viewModelList = DirectoryManager.Web.Helpers.ViewModelConverter.ConvertToViewModels(
            newestEntries.ToList(),
            DirectoryManager.Web.Enums.DateDisplayOption.DisplayCreateDate);
            }
            @foreach (var viewModel in viewModelList)
            {
                @await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
            }
        </ul>
        <hr />
    }

    @{
        var newestRevisions = await directoryEntryRepository.GetNewestRevisions(6);

        if ((newestRevisions != null && newestRevisions.Count() > 0) &&
        (newestEntries != null && newestEntries.Count() > 0))
        {
            newestRevisions = newestRevisions.Except(newestEntries).ToList().Take(3);
        }
    }

    @if (newestRevisions != null && newestRevisions.Count() > 0)
    {
        <p><b>Newest Revisions</b></p>

        <ul>
            @{
                var viewModelList = DirectoryManager.Web.Helpers.ViewModelConverter.ConvertToViewModels(
                newestRevisions.ToList(),
                DirectoryManager.Web.Enums.DateDisplayOption.DisplayUpdateDate);
            }
            @foreach (var viewModel in viewModelList)
            {
                @await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
            }

        </ul>

        <hr />
    }

    @{
        var activeCategories = await categoryRepository.GetActiveCategoriesAsync();
    }

    <p><b id="categories">Categories</b></p>
    <ul id="categories_list">
        @foreach (var category in activeCategories)
        {
            <li>
                <label for="@string.Format("{0}_checkbox", category.CategoryKey)">+</label>
                <a href="#@category.CategoryKey">@category.Name</a>
                <input type="checkbox" id="@string.Format("{0}_checkbox", category.CategoryKey)" />
                <div class="hidden">
                    <ul>
                        @foreach (var subCategory in await subCategoryRepository.GetActiveSubCategoriesAsync(category.Id))
                        {
                            <li>
                                <a href="#@category.CategoryKey-@subCategory.SubCategoryKey">@subCategory.Name</a>
                            </li>
                        }
                    </ul>
                </div>
            </li>
        }
    </ul>

    <hr />
    @{
        var sponsoredListings = await sponsoredListingRepository.GetAllActiveListingsAsync();
    }

    @foreach (var category in activeCategories)
    {
        <h2 id="@category.CategoryKey">@category.Name</h2>

        @if (!string.IsNullOrEmpty(category.Description))
        {
            <p>@category.Description</p>
        }
        @if (!string.IsNullOrEmpty(category.Note))
        {
            <p><i>(Note: @category.Note</i>)</p>
        }

        @foreach (var subCategory in await subCategoryRepository.GetActiveSubCategoriesAsync(category.Id))
        {
            <h3 id="@category.CategoryKey-@subCategory.SubCategoryKey">@subCategory.Name</h3>

            if (!string.IsNullOrEmpty(subCategory.Description))
            {
                <p>@subCategory.Description</p>
            }

            if (!string.IsNullOrEmpty(subCategory.Note))
            {
                <i>(Note: @subCategory.Note)</i>
            }

            <ul>
                @{
                    var activeEntries = await directoryEntryRepository.GetActiveEntriesByCategoryAsync(subCategory.Id);

                    var viewModelList = DirectoryManager.Web.Helpers.ViewModelConverter.ConvertToViewModels(
                    activeEntries.ToList(),
                    DirectoryManager.Web.Enums.DateDisplayOption.NotDisplayed);
                }
                @foreach (var viewModel in viewModelList)
                {
                    if (sponsoredListings.FirstOrDefault(x => x.DirectoryEntryId == viewModel.DirectoryEntry.Id) != null)
                    {
                        viewModel.IsSponsored = true;
                    }

                    @await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
                }
            </ul>
        }

        <p class="right">
            <a href="#categories">&#x2191; Categories</a>
        </p>

        <hr />
    }

</cache-content>

@await Html.PartialAsync("_DonationsPartial")