@using DirectoryManager.Data.Models
@using DirectoryManager.Web.Constants;
@using DirectoryManager.Data.Enums;
@model DirectoryManager.Data.Models.Category
@inject DirectoryManager.Data.Repositories.Interfaces.ICategoryRepository categoryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.ISubCategoryRepository subCategoryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.IDirectoryEntryRepository directoryEntryRepository
@inject DirectoryManager.Data.Repositories.Interfaces.IDirectoryEntrySelectionRepository directoryEntrySelectionRepository
@inject DirectoryManager.Data.Repositories.Interfaces.ISponsoredListingRepository sponsoredListingRepository
@inject DirectoryManager.Web.Services.Interfaces.ICacheService cacheHelper
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.HomePageTitle));
    ViewData[StringConstants.MetaContent] = Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.HomePageMetaTags));
}
<cache-content cache-key="@DirectoryManager.Web.Constants.StringConstants.EntriesCacheKey">
    @Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.HomePageDisplayHtml))
    <hr />
    <p>
        <b>Last update:</b> @directoryEntryRepository.GetLastRevisionDate().ToString(StringConstants.DateTimeFormat)
    </p>
    <hr />
        @Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.DirectoryLegendHtml))
    <hr />
    
    @await Html.PartialAsync("_SponsoredListingPartial")

    @{
        var featuredEntries = await directoryEntrySelectionRepository.GetEntriesForSelection(DirectoryManager.Data.Enums.EntrySelectionType.Featured);
        var link2Name = cacheHelper.GetSnippet(SiteConfigSetting.Link2Name);
        var link3Name = cacheHelper.GetSnippet(SiteConfigSetting.Link3Name);
    }

    @if (featuredEntries != null && featuredEntries.Count() > 0)
    {
        <hr />
        <p><b>Featured</b></p>

        <ul>
            @{
                var viewModelList = DirectoryManager.Web.Helpers.ViewModelConverter.ConvertToViewModels(
                    featuredEntries.ToList(),
                    DirectoryManager.Web.Enums.DateDisplayOption.NotDisplayed,
                    link2Name,
                    link3Name);
            }
            @foreach (var viewModel in viewModelList)
            {
                @await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
            }
        </ul>
    }

    @{
        var newestEntries = await directoryEntryRepository.GetNewestAdditions(IntegerConstants.NewestRevisionsToDisplay);
    }

    @if (newestEntries != null && newestEntries.Count() > 0)
    {
        <hr />
        <p><b>Newest Additions</b></p>
        <i>See: <a href="~/newest">all new additions</a></i>
        <ul>
            @{
                var viewModelList = DirectoryManager.Web.Helpers.ViewModelConverter.ConvertToViewModels(
                    newestEntries.ToList(),
                    DirectoryManager.Web.Enums.DateDisplayOption.DisplayCreateDate,
                    link2Name,
                    link3Name);
            }
            @foreach (var viewModel in viewModelList)
            {
                @await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
            }
        </ul>
        <hr />
    }

    @{
        var newestRevisions = await directoryEntryRepository.GetNewestRevisions(6);

        if ((newestRevisions != null && newestRevisions.Count() > 0) &&
        (newestEntries != null && newestEntries.Count() > 0))
        {
            newestRevisions = newestRevisions.Except(newestEntries).ToList().Take(IntegerConstants.NewestRevisionsToDisplay);
        }
    }

    @if (newestRevisions != null && newestRevisions.Count() > 0)
    {
        <p><b>Newest Revisions</b></p>

        <ul>
            @{
                var viewModelList = DirectoryManager.Web.Helpers.ViewModelConverter.ConvertToViewModels(
                newestRevisions.ToList(),
                DirectoryManager.Web.Enums.DateDisplayOption.DisplayUpdateDate,
                link2Name,
                link3Name);
            }
            @foreach (var viewModel in viewModelList)
            {
                @await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
            }

        </ul>

        <hr />
    }

    @{
        var activeCategories = await categoryRepository.GetActiveCategoriesAsync();
    }

    <p><b id="categories">Categories</b></p>
    <ul id="categories_list">
        @foreach (var category in activeCategories)
        {
            <li>
                <label for="@string.Format("{0}_checkbox", category.CategoryKey)">+</label>
                <a href="#@category.CategoryKey">@category.Name</a>
                <input type="checkbox" id="@string.Format("{0}_checkbox", category.CategoryKey)" />
                <div class="hidden">
                    <ul>
                        @foreach (var subCategory in await subCategoryRepository.GetActiveSubCategoriesAsync(category.CategoryId))
                        {
                            <li>
                                <a href="#@category.CategoryKey-@subCategory.SubCategoryKey">@subCategory.Name</a>
                            </li>
                        }
                    </ul>
                </div>
            </li>
        }
    </ul>

    <hr />
    @{
        var sponsoredListings = await sponsoredListingRepository.GetAllActiveListingsAsync(SponsorshipType.MainSponsor);
        var subCategorySponsors = await sponsoredListingRepository.GetAllActiveListingsAsync(SponsorshipType.SubCategorySponsor);
    }

    @foreach (var category in activeCategories)
    {
        <h2 id="@category.CategoryKey">@category.Name</h2>

        @if (!string.IsNullOrEmpty(category.Description))
        {
            <p>@category.Description</p>
        }
        @if (!string.IsNullOrEmpty(category.Note))
        {
            <p><i>(Note: @category.Note</i>)</p>
        }

        @foreach (var subCategory in await subCategoryRepository.GetActiveSubCategoriesAsync(category.CategoryId))
        {
            <h3 id="@category.CategoryKey-@subCategory.SubCategoryKey">@subCategory.Name</h3>

            if (!string.IsNullOrEmpty(subCategory.Description))
            {
                <p>@subCategory.Description</p>
            }

            if (!string.IsNullOrEmpty(subCategory.Note))
            {
                <i>(Note: @subCategory.Note)</i>
            }

            var activeEntries = await directoryEntryRepository.GetActiveEntriesByCategoryAsync(subCategory.SubCategoryId);

            var viewModelList = DirectoryManager.Web.Helpers.ViewModelConverter.ConvertToViewModels(
                                        activeEntries.ToList(),
                                        DirectoryManager.Web.Enums.DateDisplayOption.NotDisplayed,
                                        link2Name,
                                        link3Name);

            var subCategorySponsor = subCategorySponsors.FirstOrDefault(x => x.SubCategoryId == subCategory.SubCategoryId);

            var subCategorySponsorModel = new DirectoryManager.Web.Models.SubCategorySponsorModel()
            {
                        SubCategoryId = subCategory.SubCategoryId,
                        TotalActiveSubCategoryListings = activeEntries.Count(),
                        DirectoryEntry = (subCategorySponsor != null && subCategorySponsor.DirectoryEntry != null) ? new DirectoryManager.Web.Models.DirectoryEntryViewModel()
                        {
                            DirectoryEntry = subCategorySponsor.DirectoryEntry,
                            IsSponsored = true,
                            Link2Name = link2Name,
                            Link3Name = link3Name
                        } : null
            };

            @await Html.PartialAsync("_SponsoredListingSubCategoryPartial", subCategorySponsorModel)

            if (subCategorySponsor != null)
            {
               viewModelList.RemoveAll(x => x.DirectoryEntry.DirectoryEntryId == subCategorySponsor.DirectoryEntryId);
            }

            <ul>
                @foreach (var viewModel in viewModelList)
                {
                    if (sponsoredListings.FirstOrDefault(x => x.DirectoryEntryId == viewModel.DirectoryEntry.DirectoryEntryId) != null)
                    {
                        viewModel.IsSponsored = true;
                    }

                    @await Html.PartialAsync("_DirectoryEntryPartial", viewModel)
                }
            </ul>
        }

        <p class="right">
            <a href="#categories">&#x2191; Categories</a>
        </p>

        <hr />
    }
</cache-content>

@Html.Raw(cacheHelper.GetSnippet(SiteConfigSetting.DonationHtml))