@using System.Globalization;
@using DirectoryManager.DisplayFormatting.Helpers
@using DirectoryManager.Web.Constants;
@using DirectoryManager.Web.Helpers
@using DirectoryManager.Web.Services.Interfaces
@inject IUrlResolutionService UrlResolver
@model IEnumerable<DirectoryManager.Data.Models.GroupedDirectoryEntry>
@{
    ViewData[StringConstants.TitleHeader] = "Newest Additions";
}

@{
    Layout = "_CenteredLayout";
}

@section PageContent {
<h1>@ViewData[StringConstants.TitleHeader]</h1>

<hr />
@await Html.PartialAsync("_BackToHome")
<hr />

@await Html.PartialAsync("_SponsoredListingPartial")
<hr />

@{
    var htmlOutput = DisplayMarkUpHelper.GenerateGroupedDirectoryEntryHtml(Model);
}

@Html.Raw(htmlOutput)



    @{
        int totalPages = ViewBag.TotalPages;
        int currentPage = ViewBag.PageNumber;
    }

    <nav aria-label="Pagination">
        <ul class="pagination">
            @for (int i = 1; i <= totalPages; i++)
            {
                // build the raw path: page 1 is “/newest”, pages 2+ add ?pageNumber=…
                string rawPath = "/newest" + (i > 1 ? $"?pageNumber={i}" : "");

                // page 1 always on canonical root; pages 2+ on “app” domain
                string href = i == 1
                ? UrlResolver.BaseUrl.TrimEnd('/') + rawPath
                : UrlResolver.ResolveToApp(rawPath);

                // choose link class
                string linkClass = i == 1 ? "no-app-link" : "app-link";

                <li class="page-item @(i == currentPage ? "active" : "")">
                    <a class="page-link @linkClass" href="@href">
                        @i
                    </a>
                </li>
            }
        </ul>
    </nav>


<p>Total: @ViewBag.TotalEntries</p>

<hr />
    @await Html.PartialAsync("_SponsoredListingPartial")

}

